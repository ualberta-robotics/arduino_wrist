/*
 *
 *encoder_to_wrist.cpp
 *
 *  Created on: Nov 16 2015
 *      Author: Camilo P
 */
// input/output management
#include <iostream>
// file input/output management
#include <fstream>
#include <ros/ros.h>
#include <stdio.h>
#include <math.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Range.h>
#include <Eigen/Geometry>
#include <Eigen/Dense>

Eigen::VectorXf joint_position(7);

void wamJointStatesCallback(const sensor_msgs::JointState::ConstPtr& jointMessage)
{
  joint_position[0] = jointMessage->position[0];
  joint_position[1] = jointMessage->position[1];
  joint_position[2] = jointMessage->position[2];
  joint_position[3] = jointMessage->position[3];
  joint_position[4] = jointMessage->position[4];
  joint_position[5] = jointMessage->position[5];
  joint_position[6] = jointMessage->position[6];
}


int main(int argc, char** argv) 
{
  ros::init(argc, argv, "encoder_to_wrist");
  ros::NodeHandle nh;
//Subscribers
  ros::Subscriber jointSates_sub = nh.subscribe("/zeus/wam/joint_states", 1, wamJointStatesCallback);
  ros::Subscriber encoder_sub = nh.subscribe("/encoder_data", 1, encoderCallback);

//Publishers
  ros::Publisher joint_pub = nh.advertise<sensor_msgs::JointState>("/zeus/wam/jnt_hand_tool_cmd", 10);

  ros::Rate loop_rate(100);
  ROS_INFO("Main loop");

  for(int j = 0; j < 7; j++) 
    {  
      for(int i = 0; i < 3; i++) 
	{
	  linear_velocity_Jacobian(i,j)=0; 
	}
    }
 

  while(ros::ok()) 
    {
      //        force_pub.publish(msg_tool_force);
      JtimesJT= linear_velocity_Jacobian*(linear_velocity_Jacobian.transpose());   
      tool_force=JtimesJT.inverse()*linear_velocity_Jacobian*joint_torque;
      std::cout<< "Here is the Jacobian :\n" <<linear_velocity_Jacobian<<std::endl;
     std::cout<< "Here is the JointTorque:\n" <<  joint_torque<<std::endl;
     
     
      std::cout<< "The force in the robot tool is:\n" << tool_force <<std::endl;
      ros::spinOnce();
      loop_rate.sleep();
    }
}
