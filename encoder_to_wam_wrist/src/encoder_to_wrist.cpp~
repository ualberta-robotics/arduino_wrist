/*
 *
 *encoder_to_wrist.cpp
 *
 *  Created on: Nov 16 2015
 *      Author: Camilo P
 */
// input/output management
#include <iostream>
// file input/output management
#include <fstream>
#include <ros/ros.h>
#include <stdio.h>
#include <math.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Range.h>
//#include <Eigen/Geometry>
//#include <Eigen/Dense>
#define PI        3.14159265358979323
//Eigen::VectorXf joint_position(7);
float encoder_value, rad_value;
/*void wamJointStatesCallback(const sensor_msgs::JointState::ConstPtr& jointMessage)
{
  joint_position[0] = jointMessage->position[0];
  joint_position[1] = jointMessage->position[1];
  joint_position[2] = jointMessage->position[2];
  joint_position[3] = jointMessage->position[3];
  joint_position[4] = jointMessage->position[4];
  joint_position[5] = jointMessage->position[5];
  joint_position[6] = jointMessage->position[6];
  }*/


void encoderCallback(const sensor_msgs::Range::ConstPtr& encoderMessage)
{
  encoder_value=encoderMessage->range;
  if(encoder_value<782 && encoder_value>0)
    {
      rad_value=encoder_value*2*PI/4096;
    }
  else if(encoder_value<4096 && encoder_value>1098)
    {
      rad_value=(encoder_value-4096)*2*PI/4096;
    }
  else
    {}
}


int main(int argc, char** argv) 
{
  ros::init(argc, argv, "encoder_to_wrist");
  ros::NodeHandle nh;
//Subscribers
//  ros::Subscriber jointSates_sub = nh.subscribe("/zeus/wam/joint_states", 1, wamJointStatesCallback);
  ros::Subscriber encoder_sub = nh.subscribe("/encoder_data", 1, encoderCallback);

//Publishers
  ros::Publisher joint_pub = nh.advertise<sensor_msgs::JointState>("/zeus/wam/jnt_hand_tool_cmd", 1);

  ros::Rate loop_rate(10);
  ROS_INFO("Main loop");
 
  //sensor_msgs::JointState send_joints;
  //send_joints.position.resize(7);
  while(ros::ok()) 
    {
       sensor_msgs::JointState send_joints;
      //send_joints.position.resize(7);
      send_joints.position.push_back(0.0);
      send_joints.position.push_back(0.0);
      send_joints.position.push_back(0.0);
      send_joints.position.push_back(0.0);
      send_joints.position.push_back(rad_value);
      send_joints.position.push_back(0.0);
      send_joints.position.push_back(0.0);
      joint_pub.publish(send_joints);
      ros::spinOnce();
      loop_rate.sleep();
    }
}
